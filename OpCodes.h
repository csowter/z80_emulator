#ifndef opcodes_h
#define opcodes_h

struct OpCodes
{
  enum 
  {
    NOP,               
    LD_BC_word,        
    LD_iBC_A,          
    INC_BC,            
    INC_B,
    DEC_B,             
    LD_B_byte,    
    RLCA,
    EX_AF_AF,
    ADD_HL_BC,
    LD_A_iBC,
    DEC_BC,
    INC_C,
    DEC_C,
    LD_C_byte,
    RRCA,
    DJNZ,
    LD_DE_word,
    LD_iDE_A,
    INC_DE,
    INC_D,
    DEC_D,
    LD_D_byte,
    RLA,
    JR,
    ADD_HL_DE,
    LD_A_iDE,
    DEC_DE,
    INC_E,
    DEC_E,
    LD_E_byte,
    RRA,
    JR_NZ,
    LD_HL_word,
    LD_iNN_HL,
    INC_HL,
    INC_H,
    DEC_H,
    LD_H_byte,
    DAA,
    JR_Z,
    ADD_HL_HL,
    LD_HL_iNN,
    DEC_HL,
    INC_L,
    DEC_L,
    LD_L_byte,
    CPL,
    JR_NC,
    LD_SP_word,
    LD_iNN_A,
    INC_SP,
    INC_iHL,
    DEC_iHL,
    LD_iHL_byte,
    SCF,
    JR_C,
    ADD_HL_SP,
    LD_A_iNN,
    DEC_SP,
    INC_A,
    DEC_A,
    LD_A_byte,
    CCF,
    LD_B_B,
    LD_B_C,
    LD_B_D,
    LD_B_E,
    LD_B_H,
    LD_B_L,
    LD_B_iHL,
    LD_B_A,
    LD_C_B,
    LD_C_C,
    LD_C_D,
    LD_C_E,
    LD_C_H,
    LD_C_L,
    LD_C_iHL,
    LD_C_A,
    LD_D_B,
    LD_D_C,
    LD_D_D,
    LD_D_E,
    LD_D_H,
    LD_D_L,
    LD_D_iHL,
    LD_D_A,
    LD_E_B,
    LD_E_C,
    LD_E_D,
    LD_E_E,
    LD_E_H,
    LD_E_L,
    LD_E_iHL,
    LD_E_A,
    LD_H_B,
    LD_H_C,
    LD_H_D,
    LD_H_E,
    LD_H_H,
    LD_H_L,
    LD_H_iHL,
    LD_H_A,
    LD_L_B,
    LD_L_C,
    LD_L_D,
    LD_L_E,
    LD_L_H,
    LD_L_L,
    LD_L_iHL,
    LD_L_A,
    LD_iHL_B,
    LD_iHL_C,
    LD_iHL_D,
    LD_iHL_E,
    LD_iHL_H,
    LD_iHL_L,
    HALT,
    LD_iHL_A,
    LD_A_B,
    LD_A_C,
    LD_A_D,
    LD_A_E,
    LD_A_H,
    LD_A_L,
    LD_A_iHL,
    LD_A_A,
    ADD_A_B,
    ADD_A_C,
    ADD_A_D,
    ADD_A_E,
    ADD_A_H,
    ADD_A_L,
    ADD_A_iHL,
    ADD_A_A,
    ADC_A_B,
    ADC_A_C,
    ADC_A_D,
    ADC_A_E,
    ADC_A_H,
    ADC_A_L,
    ADC_A_iHL,
    ADC_A_A,
    SUB_A_B,
    SUB_A_C,
    SUB_A_D,
    SUB_A_E,
    SUB_A_H,
    SUB_A_L,
    SUB_A_iHL,
    SUB_A_A,
    SBC_A_B,
    SBC_A_C,
    SBC_A_D,
    SBC_A_E,
    SBC_A_H,
    SBC_A_L,
    SBC_A_iHL,
    SBC_A_A,
    AND_B,
    AND_C,
    AND_D,
    AND_E,
    AND_H,
    AND_L,
    AND_iHL,
    AND_A,
    XOR_B,
    XOR_C,
    XOR_D,
    XOR_E,
    XOR_H,
    XOR_L,
    XOR_iHL,
    XOR_A,
    OR_B,
    OR_C,
    OR_D,
    OR_E,
    OR_H,
    OR_L,
    OR_iHL,
    OR_A,
    CP_B,
    CP_C,
    CP_D,
    CP_E,
    CP_H,
    CP_L,
    CP_iHL,
    CP_A,
    RET_NZ,
    POP_BC,
    JP_NZ_word,
    JP_word,
    CALL_NZ_word,
    PUSH_BC,
    ADD_A_byte,
    RST_00,
    RET_Z,
    RET,
    JP_Z_word,
    CB,
    CALL_Z_word,
    CALL_word,
    ADC_A_byte,
    RST_08,
    RET_NC,
    POP_DE,
    JP_NC_word,
    OUT_iNN_A,
    CALL_NC_word,
    PUSH_DE,
    SUB_A_byte,
    RST_10,
    RET_C,
    EXX,
    JP_C_word,
    IN_A_iNN,
    CALL_C_word,
    DD,
    SBC_A_byte,
    RST_18,
    RET_PO,
    POP_HL,
    JP_PO_word,
    EX_iSP_HL,
    CALL_PO_word,
    PUSH_HL,
    AND_byte,
    RST_20,
    RET_PE,
    JP_iHL,
    JP_PE_word,
    EX_DE_HL,
    CALL_PE_word,
    ED,
    XOR_byte,
    RST_28,
    RET_P,
    POP_AF,
    JP_P_word,
    DI,
    CALL_P_word,
    PUSH_AF,
    OR_byte,
    RST_30,
    RET_M,
    LD_SP_HL,
    JP_M_word,
    EI,
    CALL_M_word,
    FD,
    CP_byte,
    RST_38,
    NUMBER_OF_OPCODES          
  };
};

struct CB_OpCodes
{
  enum
  {
    RLC_B,
    RLC_C,
    RLC_D,
    RLC_E,
    RLC_H,
    RLC_L,
    RLC_iHL,
    RLC_A,
    RRC_B,
    RRC_C,
    RRC_D,
    RRC_E,
    RRC_H,
    RRC_L,
    RRC_iHL,
    RRC_A,
    RL_B,
    RL_C,
    RL_D,
    RL_E,
    RL_H,
    RL_L,
    RL_iHL,
    RL_A,
    RR_B,
    RR_C,
    RR_D,
    RR_E,
    RR_H,
    RR_L,
    RR_iHL,
    RR_A,
    SLA_B,
    SLA_C,
    SLA_D,
    SLA_E,
    SLA_H,
    SLA_L,
    SLA_iHL,
    SLA_A,
    SRA_B,
    SRA_C,
    SRA_D,
    SRA_E,
    SRA_H,
    SRA_L,
    SRA_iHL,
    SRA_A,
    SLS_B,
    SLS_C,
    SLS_D,
    SLS_E,
    SLS_H,
    SLS_L,
    SLS_iHL,
    SLS_A,
    SRL_B,
    SRL_C,
    SRL_D,
    SRL_E,
    SRL_H,
    SRL_L,
    SRL_iHL,
    SRL_A,
    BIT_0_B,
    BIT_0_C,
    BIT_0_D,
    BIT_0_E,
    BIT_0_H,
    BIT_0_L,
    BIT_0_iHL,
    BIT_0_A,
    BIT_1_B,
    BIT_1_C,
    BIT_1_D,
    BIT_1_E,
    BIT_1_H,
    BIT_1_L,
    BIT_1_iHL,
    BIT_1_A,
    BIT_2_B,
    BIT_2_C,
    BIT_2_D,
    BIT_2_E,
    BIT_2_H,
    BIT_2_L,
    BIT_2_iHL,
    BIT_2_A,
    BIT_3_B,
    BIT_3_C,
    BIT_3_D,
    BIT_3_E,
    BIT_3_H,
    BIT_3_L,
    BIT_3_iHL,
    BIT_3_A,
    BIT_4_B,
    BIT_4_C,
    BIT_4_D,
    BIT_4_E,
    BIT_4_H,
    BIT_4_L,
    BIT_4_iHL,
    BIT_4_A,
    BIT_5_B,
    BIT_5_C,
    BIT_5_D,
    BIT_5_E,
    BIT_5_H,
    BIT_5_L,
    BIT_5_iHL,
    BIT_5_A,
    BIT_6_B,
    BIT_6_C,
    BIT_6_D,
    BIT_6_E,
    BIT_6_H,
    BIT_6_L,
    BIT_6_iHL,
    BIT_6_A,
    BIT_7_B,
    BIT_7_C,
    BIT_7_D,
    BIT_7_E,
    BIT_7_H,
    BIT_7_L,
    BIT_7_iHL,
    BIT_7_A,
    RES_0_B,
    RES_0_C,
    RES_0_D,
    RES_0_E,
    RES_0_H,
    RES_0_L,
    RES_0_iHL,
    RES_0_A,
    RES_1_B,
    RES_1_C,
    RES_1_D,
    RES_1_E,
    RES_1_H,
    RES_1_L,
    RES_1_iHL,
    RES_1_A,
    RES_2_B,
    RES_2_C,
    RES_2_D,
    RES_2_E,
    RES_2_H,
    RES_2_L,
    RES_2_iHL,
    RES_2_A,
    RES_3_B,
    RES_3_C,
    RES_3_D,
    RES_3_E,
    RES_3_H,
    RES_3_L,
    RES_3_iHL,
    RES_3_A,
    RES_4_B,
    RES_4_C,
    RES_4_D,
    RES_4_E,
    RES_4_H,
    RES_4_L,
    RES_4_iHL,
    RES_4_A,
    RES_5_B,
    RES_5_C,
    RES_5_D,
    RES_5_E,
    RES_5_H,
    RES_5_L,
    RES_5_iHL,
    RES_5_A,
    RES_6_B,
    RES_6_C,
    RES_6_D,
    RES_6_E,
    RES_6_H,
    RES_6_L,
    RES_6_iHL,
    RES_6_A,
    RES_7_B,
    RES_7_C,
    RES_7_D,
    RES_7_E,
    RES_7_H,
    RES_7_L,
    RES_7_iHL,
    RES_7_A,
    SET_0_B,
    SET_0_C,
    SET_0_D,
    SET_0_E,
    SET_0_H,
    SET_0_L,
    SET_0_iHL,
    SET_0_A,
    SET_1_B,
    SET_1_C,
    SET_1_D,
    SET_1_E,
    SET_1_H,
    SET_1_L,
    SET_1_iHL,
    SET_1_A,
    SET_2_B,
    SET_2_C,
    SET_2_D,
    SET_2_E,
    SET_2_H,
    SET_2_L,
    SET_2_iHL,
    SET_2_A,
    SET_3_B,
    SET_3_C,
    SET_3_D,
    SET_3_E,
    SET_3_H,
    SET_3_L,
    SET_3_iHL,
    SET_3_A,
    SET_4_B,
    SET_4_C,
    SET_4_D,
    SET_4_E,
    SET_4_H,
    SET_4_L,
    SET_4_iHL,
    SET_4_A,
    SET_5_B,
    SET_5_C,
    SET_5_D,
    SET_5_E,
    SET_5_H,
    SET_5_L,
    SET_5_iHL,
    SET_5_A,
    SET_6_B,
    SET_6_C,
    SET_6_D,
    SET_6_E,
    SET_6_H,
    SET_6_L,
    SET_6_iHL,
    SET_6_A,
    SET_7_B,
    SET_7_C,
    SET_7_D,
    SET_7_E,
    SET_7_H,
    SET_7_L,
    SET_7_iHL,
    SET_7_A,
    NUMBER_OF_OPCODES
  };
};

#endif